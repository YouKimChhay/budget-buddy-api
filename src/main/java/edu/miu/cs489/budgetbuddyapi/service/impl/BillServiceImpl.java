package edu.miu.cs489.budgetbuddyapi.service.impl;

import edu.miu.cs489.budgetbuddyapi.model.Bill;
import edu.miu.cs489.budgetbuddyapi.model.Expense;
import edu.miu.cs489.budgetbuddyapi.model.User;
import edu.miu.cs489.budgetbuddyapi.repository.BillRepository;
import edu.miu.cs489.budgetbuddyapi.repository.CategoryRepository;
import edu.miu.cs489.budgetbuddyapi.repository.ExpenseRepository;
import edu.miu.cs489.budgetbuddyapi.repository.UserRepository;
import edu.miu.cs489.budgetbuddyapi.service.BillService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class BillServiceImpl implements BillService {

    private final BillRepository billRepository;
    private final UserRepository userRepository;
    private final CategoryRepository categoryRepository;
    private final ExpenseRepository expenseRepository;

    @Override
    public Bill addNewBill(Long userId, Bill bill) {
        User user = userRepository.findById(userId).orElseThrow(() -> new EntityNotFoundException("User not found."));
        bill.setUser(user);
        bill.setCategory(categoryRepository.findCategoryByNameAndUserId(bill.getCategory().getName(), userId).orElseThrow(() -> new EntityNotFoundException("Category not found")));
        return billRepository.save(bill);
    }

    @Override
    public List<Bill> getAllBills(Long userId) {
        return billRepository.getBillsByUserId(userId);
    }

    @Override
    public Bill getBillById(Long userId, Long billId) throws EntityNotFoundException {
        return billRepository.getBillByIdAndUserId(billId, userId).orElseThrow(() -> new EntityNotFoundException("Bill not found."));
    }

    @Override
    public Bill updateBillById(Long userId, Long billId, Bill updatedBill) throws EntityNotFoundException {
        Bill bill = getBillById(userId, billId);
        bill.setName(updatedBill.getName());
        bill.setAmount(updatedBill.getAmount());
        bill.setUpdatedAt(LocalDateTime.now());
        if (!bill.getCategory().getName().equals(updatedBill.getCategory().getName()))
            bill.setCategory(categoryRepository.findCategoryByNameAndUserId(updatedBill.getCategory().getName(), userId).orElseThrow(() -> new EntityNotFoundException("Category not found.")));
        return billRepository.save(bill);
    }

    @Override
    public void deleteBillById(Long userId, Long billId) {
        getBillById(userId, billId);
        billRepository.deleteById(billId);
    }

    @Override
    public Expense payBill(Long userId, Long billId) throws EntityNotFoundException {
        Bill bill = getBillById(userId, billId);
        Expense expense = Expense.builder()
                .name(bill.getName())
                .description("Generated by billing")
                .amount(bill.getAmount())
                .category(bill.getCategory())
                .user(bill.getUser())
                .paymentDate(LocalDate.now())
                .createdAt(LocalDateTime.now())
                .build();
        return expenseRepository.save(expense);
    }
}
